{"version":3,"sources":["webpack:///src/app/auth/auth-routing.module.ts","webpack:///src/app/auth/auth.module.ts","webpack:///src/app/auth/register/register.component.ts","webpack:///src/app/auth/register/register.component.html","webpack:///src/app/auth/login/login.component.ts","webpack:///src/app/auth/login/login.component.html"],"names":["routes","path","component","children","NgxAuthRoutingModule","forChild","imports","exports","NgxAuthModule","declarations","providers","NgxRegisterComponent","service","options","cd","router","auth","localStorage","setItem","register","user","selector","templateUrl","NgxLoginComponent","login"],"mappings":"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","file":"auth-auth-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NbAuthComponent } from '@nebular/auth';\nimport { NgxLoginComponent} from './login/login.component';\nimport { NgxRegisterComponent } from './register/register.component';\n\nexport const routes: Routes = [\n  // .. here goes our components routes\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: 'login',\n        component: NgxLoginComponent,\n      },\n      {\n        path: 'register',\n        component: NgxRegisterComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NgxAuthRoutingModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { NgxAuthRoutingModule } from './auth-routing.module';\nimport { NbAuthModule } from '@nebular/auth';\nimport {\n  NbAlertModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbInputModule,\n} from '@nebular/theme';\nimport { NgxLoginComponent } from './login/login.component';\nimport { NgxRegisterComponent } from './register/register.component';\nimport { AuthService } from './services/auth.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NgxAuthRoutingModule,\n\n    NbAuthModule,\n  ],\n  declarations: [\n    // ... here goes our new components\n    NgxLoginComponent,\n    NgxRegisterComponent,\n  ],\n  providers: [\n    AuthService,\n  ],\n})\nexport class NgxAuthModule {\n}\n","import {ChangeDetectorRef, Component, Inject} from '@angular/core';\nimport {NB_AUTH_OPTIONS, NbAuthService, NbRegisterComponent} from '@nebular/auth';\nimport {AuthService} from '../services/auth.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n})\nexport class NgxRegisterComponent extends NbRegisterComponent {\n\n  constructor(service: NbAuthService, @Inject(NB_AUTH_OPTIONS) options: {},\n              cd: ChangeDetectorRef, router: Router, private auth: AuthService) {\n    super(service, options, cd, router);\n    localStorage.setItem('token', null);\n    localStorage.setItem('user', null);\n  }\n\n  register() {\n    // console.log(this.user);\n    this.auth.register(this.user);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Register</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Full name:</label>\n    <input nbInput\n           [(ngModel)]=\"user.fullName\"\n           #fullName=\"ngModel\"\n           id=\"input-name\"\n           name=\"fullName\"\n           placeholder=\"Full name\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.required\">\n        Full name is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\n        Full name should contains\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Email address\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Register\n  </button>\n</form>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\n</section>\n","// import\nimport { ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { NB_AUTH_OPTIONS, NbAuthService, NbLoginComponent } from '@nebular/auth';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n})\nexport class NgxLoginComponent extends NbLoginComponent {\n\n  constructor(service: NbAuthService, @Inject(NB_AUTH_OPTIONS) options: {},\n              cd: ChangeDetectorRef, router: Router, private auth: AuthService) {\n    super(service, options, cd, router);\n    localStorage.setItem('token', null);\n    localStorage.setItem('user', null);\n  }\n\n  login() {\n    // console.log(this.user);\n    this.auth.login(this.user);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Login</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           name=\"email\"\n           id=\"input-email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           fieldSize=\"large\"\n           autofocus\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n<!--    <span class=\"label-with-link\">-->\n<!--      <label class=\"label\" for=\"input-password\">Password:</label>-->\n<!--      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\">Forgot Password?</a>-->\n<!--    </span>-->\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           name=\"password\"\n           type=\"password\"\n           id=\"input-password\"\n           placeholder=\"Password\"\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n<!--  <div class=\"form-control-group accept-group\">-->\n<!--    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>-->\n<!--  </div>-->\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Log In\n  </button>\n</form>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\n</section>\n"]}