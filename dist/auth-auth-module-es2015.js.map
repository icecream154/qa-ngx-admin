{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/auth.module.ts","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html"],"names":[],"mappings":"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","file":"auth-auth-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { NbAuthComponent } from '@nebular/auth';\nimport { NgxLoginComponent} from './login/login.component';\nimport { NgxRegisterComponent } from './register/register.component';\n\nexport const routes: Routes = [\n  // .. here goes our components routes\n  {\n    path: '',\n    component: NbAuthComponent,\n    children: [\n      {\n        path: 'login',\n        component: NgxLoginComponent,\n      },\n      {\n        path: 'register',\n        component: NgxRegisterComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NgxAuthRoutingModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { NgxAuthRoutingModule } from './auth-routing.module';\nimport { NbAuthModule } from '@nebular/auth';\nimport {\n  NbAlertModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbInputModule,\n} from '@nebular/theme';\nimport { NgxLoginComponent } from './login/login.component';\nimport { NgxRegisterComponent } from './register/register.component';\nimport { AuthService } from './services/auth.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NgxAuthRoutingModule,\n\n    NbAuthModule,\n  ],\n  declarations: [\n    // ... here goes our new components\n    NgxLoginComponent,\n    NgxRegisterComponent,\n  ],\n  providers: [\n    AuthService,\n  ],\n})\nexport class NgxAuthModule {\n}\n","import {ChangeDetectorRef, Component, Inject} from '@angular/core';\nimport {NB_AUTH_OPTIONS, NbAuthService, NbRegisterComponent} from '@nebular/auth';\nimport {AuthService} from '../services/auth.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'ngx-register',\n  templateUrl: './register.component.html',\n})\nexport class NgxRegisterComponent extends NbRegisterComponent {\n\n  constructor(service: NbAuthService, @Inject(NB_AUTH_OPTIONS) options: {},\n              cd: ChangeDetectorRef, router: Router, private auth: AuthService) {\n    super(service, options, cd, router);\n    localStorage.setItem('token', null);\n    localStorage.setItem('user', null);\n  }\n\n  register() {\n    // console.log(this.user);\n    this.auth.register(this.user);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Register</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"register()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-name\">Full name:</label>\n    <input nbInput\n           [(ngModel)]=\"user.fullName\"\n           #fullName=\"ngModel\"\n           id=\"input-name\"\n           name=\"fullName\"\n           placeholder=\"Full name\"\n           autofocus\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.fullName.required')\"\n           [minlength]=\"getConfigValue('forms.validation.fullName.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.fullName.maxLength')\"\n           [attr.aria-invalid]=\"fullName.invalid && fullName.touched ? true : null\">\n    <ng-container *ngIf=\"fullName.invalid && fullName.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.required\">\n        Full name is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"fullName.errors?.minlength || fullName.errors?.maxlength\">\n        Full name should contains\n        from {{getConfigValue('forms.validation.fullName.minLength')}}\n        to {{getConfigValue('forms.validation.fullName.maxLength')}}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           id=\"input-email\"\n           name=\"email\"\n           pattern=\".+@.+..+\"\n           placeholder=\"Email address\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           type=\"password\"\n           id=\"input-password\"\n           name=\"password\"\n           placeholder=\"Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-re-password\">Repeat password:</label>\n    <input nbInput\n           [(ngModel)]=\"user.confirmPassword\"\n           #rePass=\"ngModel\"\n           type=\"password\"\n           id=\"input-re-password\"\n           name=\"rePass\"\n           placeholder=\"Confirm Password\"\n           fullWidth\n           fieldSize=\"large\"\n           [status]=\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [attr.aria-invalid]=\"rePass.invalid && rePass.touched ? true : null\">\n    <ng-container *ngIf=\"rePass.invalid && rePass.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"rePass.errors?.required\">\n        Password confirmation is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.value != rePass.value && !rePass.errors?.required\">\n        Password does not match the confirm password.\n      </p>\n    </ng-container>\n  </div>\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Register\n  </button>\n</form>\n\n<section class=\"another-action\" aria-label=\"Sign in\">\n  Already have an account? <a class=\"text-link\" routerLink=\"../login\">Log in</a>\n</section>\n","// import\nimport { ChangeDetectorRef, Component, Inject } from '@angular/core';\nimport { NB_AUTH_OPTIONS, NbAuthService, NbLoginComponent } from '@nebular/auth';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'ngx-login',\n  templateUrl: './login.component.html',\n})\nexport class NgxLoginComponent extends NbLoginComponent {\n\n  constructor(service: NbAuthService, @Inject(NB_AUTH_OPTIONS) options: {},\n              cd: ChangeDetectorRef, router: Router, private auth: AuthService) {\n    super(service, options, cd, router);\n    localStorage.setItem('token', null);\n    localStorage.setItem('user', null);\n  }\n\n  login() {\n    // console.log(this.user);\n    this.auth.login(this.user);\n  }\n}\n","<h1 id=\"title\" class=\"title\">Login</h1>\n\n<nb-alert *ngIf=\"showMessages.error && errors?.length && !submitted\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert *ngIf=\"showMessages.success && messages?.length && !submitted\" outline=\"success\" role=\"alert\">\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">{{ message }}</li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\">Email address:</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.email\"\n           #email=\"ngModel\"\n           name=\"email\"\n           id=\"input-email\"\n           pattern=\".+@.+\\..+\"\n           placeholder=\"Email address\"\n           fieldSize=\"large\"\n           autofocus\n           [status]=\"email.dirty ? (email.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.email.required')\"\n           [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\">\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n<!--    <span class=\"label-with-link\">-->\n<!--      <label class=\"label\" for=\"input-password\">Password:</label>-->\n<!--      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\">Forgot Password?</a>-->\n<!--    </span>-->\n    <label class=\"label\" for=\"input-password\">Password:</label>\n    <input nbInput\n           fullWidth\n           [(ngModel)]=\"user.password\"\n           #password=\"ngModel\"\n           name=\"password\"\n           type=\"password\"\n           id=\"input-password\"\n           placeholder=\"Password\"\n           fieldSize=\"large\"\n           [status]=\"password.dirty ? (password.invalid  ? 'danger' : 'success') : 'basic'\"\n           [required]=\"getConfigValue('forms.validation.password.required')\"\n           [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n           [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n           [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\">\n    <ng-container *ngIf=\"password.invalid && password.touched \">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.minlength || password.errors?.maxlength\">\n        Password should contain\n        from {{ getConfigValue('forms.validation.password.minLength') }}\n        to {{ getConfigValue('forms.validation.password.maxLength') }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n<!--  <div class=\"form-control-group accept-group\">-->\n<!--    <nb-checkbox name=\"rememberMe\" [(ngModel)]=\"user.rememberMe\" *ngIf=\"rememberMe\">Remember me</nb-checkbox>-->\n<!--  </div>-->\n\n  <button nbButton\n          fullWidth\n          status=\"primary\"\n          size=\"large\"\n          [disabled]=\"submitted || !form.valid\"\n          [class.btn-pulse]=\"submitted\">\n    Log In\n  </button>\n</form>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  Don't have an account? <a class=\"text-link\" routerLink=\"../register\">Register</a>\n</section>\n"],"sourceRoot":"webpack:///"}